<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.fintecher.pangolin.report.mapper.DailyResultReportMapper">
    <!-- 查询催收员每日催收结果实时报表 -->
    <select id="getRealTimeReport" parameterType="cn.fintecher.pangolin.report.model.GeneralParams"
            resultType="cn.fintecher.pangolin.report.entity.DailyResultReport">
        SELECT b.companyCode,b.deptCode,b.deptName,b.parentDeptCode,b.parentDeptName,b.userName,b.realName,
        case when a.caseNum is null then 0 else a.caseNum end as caseNum,
        case when a.caseAmt is null then 0 else a.caseAmt end as caseAmt,
        case when b.dayNum is null then 0 else b.dayNum end as dayNum,
        case when b.dayAmt is null then 0 else b.dayAmt end as dayAmt,
        case when b.monthNum is null then 0 else b.monthNum end as monthNum,
        case when b.monthAmt is null then 0 else b.monthAmt end as monthAmt,
        case when(b.dayNum / a.caseNum) is null then 0 else (b.dayNum / a.caseNum) end as dayNumRate,
        case when(b.dayAmt / a.caseAmt) is null then 0 else (b.dayAmt / a.caseAmt) end as dayAmtRate,
        case when(b.monthAmt / a.caseAmt) is null then 0 else (b.monthAmt / a.caseAmt) end as backMoneyRate,
        b.target from (SELECT current_collector,
        count(case when collection_status in(20,21,22,23,24,171,172) then id end) as caseNum,
        sum(case when collection_status in (20,21,22,23,24,171,172) then ((case when overdue_amount is null then 0 else
        overdue_amount end)+(case when early_settle_amt is null then 0 else early_settle_amt end)) else 0 end) as
        caseAmt
        from case_info where current_collector is not null GROUP BY current_collector) a
        LEFT JOIN
        (SELECT
        m.id,m.userName,m.realName,n.deptCode,n.deptName,n.parentDeptCode,n.parentDeptName,c.dayNum,c.dayAmt,c.monthNum,c.monthAmt,d.target,m.companyCode
        from
        (SELECT id,user_name as userName,real_name as realName,dept_id as deptId,company_code as companyCode from user)
        m
        LEFT JOIN
        (SELECT z.id,z.deptCode,z.deptName,x.parentDeptCode,x.parentDeptName from
        (SELECT id,pid,`code` as deptCode,`name` as deptName from department) z
        LEFT JOIN
        (SELECT id,`code` as parentDeptCode,`name` as parentDeptName from department) x on z.pid = x.id
        ) n on m.deptId = n.id
        LEFT JOIN
        (SELECT approve_pay_user,count(case when DATE_FORMAT(approve_pay_datetime,'%Y-%m-%d') =
        DATE_FORMAT(NOW(),'%Y-%m-%d') then id end) as dayNum,
        sum(case when DATE_FORMAT(approve_pay_datetime,'%Y-%m-%d') = DATE_FORMAT(NOW(),'%Y-%m-%d') then(case when
        apply_pay_amt is null then 0 else apply_pay_amt end) + (case when apply_derate_amt is null then 0 else
        apply_derate_amt end) else 0 end) as dayAmt,
        count(case when DATE_FORMAT(approve_pay_datetime,'%Y-%m') = DATE_FORMAT(NOW(),'%Y-%m') then id end) as monthNum,
        sum(case when DATE_FORMAT(approve_pay_datetime,'%Y-%m') = DATE_FORMAT(NOW(),'%Y-%m') then(case when
        apply_pay_amt is null then 0 else apply_pay_amt end) + (case when apply_derate_amt is null then 0 else
        apply_derate_amt end) else 0 end) as monthAmt
        from case_pay_apply where approve_status = 58 group by approve_pay_user) c on m.userName = c.approve_pay_user
        LEFT JOIN
        (SELECT user_name,`year`,`month`,back_cash as target from user_backcash_plan where DATE_FORMAT(NOW(),'%Y') =
        `year` and DATE_FORMAT(NOW(),'%c') = `month`) d
        on m.userName = d.user_name
        ) b on a.current_collector = b.id where b.deptCode LIKE CONCAT(#{deptCode},'%') AND b.companyCode =
        #{companyCode}
        <if test="code != null">
            AND b.deptCode LIKE CONCAT(#{code},'%')
        </if>
        <if test="realName != null">
            AND b.realName LIKE CONCAT('%',#{realName},'%')
        </if>
    </select>

    <!-- 生成催收员每日催收结果历史报表 -->
    <select id="saveHistoryReport" parameterType="Date"
            resultType="cn.fintecher.pangolin.report.entity.DailyResultReport">
        SELECT b.companyCode,b.deptCode,b.deptName,b.parentDeptCode,b.parentDeptName,b.userName,b.realName,
        case when a.caseNum is null then 0 else a.caseNum end as caseNum,
        case when a.caseAmt is null then 0 else a.caseAmt end as caseAmt,
        case when b.dayNum is null then 0 else b.dayNum end as dayNum,
        case when b.dayAmt is null then 0 else b.dayAmt end as dayAmt,
        case when b.monthNum is null then 0 else b.monthNum end as monthNum,
        case when b.monthAmt is null then 0 else b.monthAmt end as monthAmt,
        case when(b.dayNum / a.caseNum) is null then 0 else (b.dayNum / a.caseNum) end as dayNumRate,
        case when(b.dayAmt / a.caseAmt) is null then 0 else (b.dayAmt / a.caseAmt) end as dayAmtRate,
        case when(b.monthAmt / a.caseAmt) is null then 0 else (b.monthAmt / a.caseAmt) end as backMoneyRate,
        b.target from (SELECT current_collector,
        count(case when collection_status in(20,21,22,23,24,171,172) then id end) as caseNum,
        sum(case when collection_status in (20,21,22,23,24,171,172) then ((case when overdue_amount is null then 0 else overdue_amount end)+(case when early_settle_amt is null then 0 else early_settle_amt end)) else 0 end) as caseAmt
        from case_info where current_collector is not null GROUP BY current_collector) a
        LEFT JOIN
        (SELECT m.id,m.userName,m.realName,n.deptCode,n.deptName,n.parentDeptCode,n.parentDeptName,c.dayNum,c.dayAmt,c.monthNum,c.monthAmt,d.target,m.companyCode from
        (SELECT id,user_name as userName,real_name as realName,dept_id as deptId,company_code as companyCode from user) m
        LEFT JOIN
        (SELECT z.id,z.deptCode,z.deptName,x.parentDeptCode,x.parentDeptName from
        (SELECT id,pid,`code` as deptCode,`name` as deptName from department) z
        LEFT JOIN
        (SELECT id,`code` as parentDeptCode,`name` as parentDeptName from department) x on z.pid = x.id
        ) n on m.deptId = n.id
        LEFT JOIN
        (SELECT approve_pay_user,count(case when DATE_FORMAT(approve_pay_datetime,'%Y-%m-%d') = DATE_FORMAT(#{historyDate},'%Y-%m-%d') then id end) as dayNum,
        sum(case when DATE_FORMAT(approve_pay_datetime,'%Y-%m-%d') = DATE_FORMAT(#{historyDate},'%Y-%m-%d') then(case when apply_pay_amt is null then 0 else apply_pay_amt end) + (case when apply_derate_amt is null then 0 else apply_derate_amt end) else 0 end) as dayAmt,
        count(case when DATE_FORMAT(approve_pay_datetime,'%Y-%m') = DATE_FORMAT(#{historyDate},'%Y-%m') then id end) as monthNum,
        sum(case when DATE_FORMAT(approve_pay_datetime,'%Y-%m') = DATE_FORMAT(#{historyDate},'%Y-%m') then(case when apply_pay_amt is null then 0 else apply_pay_amt end) + (case when apply_derate_amt is null then 0 else apply_derate_amt end) else 0 end) as monthAmt
        from case_pay_apply where approve_status = 58 group by approve_pay_user) c on m.userName = c.approve_pay_user
        LEFT JOIN
        (SELECT user_name,`year`,`month`,back_cash as target from user_backcash_plan where DATE_FORMAT(#{historyDate},'%Y') = `year` and DATE_FORMAT(#{historyDate},'%c') = `month`) d
        on m.userName = d.user_name
        ) b on a.current_collector = b.id
    </select>

    <!-- 查询催收员每日催收结果历史报表 -->
    <select id="getHistoryReport" parameterType="cn.fintecher.pangolin.report.model.GeneralParams"
            resultType="cn.fintecher.pangolin.report.entity.DailyResultReport">
        SELECT * from daily_result_report where dept_code LIKE CONCAT(#{deptCode},'%') AND company_code = #{companyCode}
        <if test="startDate != null and endDate != null">
            AND <![CDATA[DATE_FORMAT(now_date,'%Y-%m-%d') >= DATE_FORMAT(#{startDate},'%Y-%m-%d')]]>
            AND <![CDATA[DATE_FORMAT(now_date,'%Y-%m-%d') <= DATE_FORMAT(#{endDate},'%Y-%m-%d')]]>
        </if>
        <if test="code != null">
            AND dept_code LIKE CONCAT(#{code}, '%')
        </if>
        <if test="realName != null">
            AND real_name LIKE concat('%',#{realName},'%')
        </if>
        order by now_date DESC
    </select>
</mapper>